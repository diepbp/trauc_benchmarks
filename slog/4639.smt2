(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_2 () String)
(declare-fun x_3 () String)
(declare-fun literal_4 () String)
(declare-fun x_6 () String)
(declare-fun literal_5 () String)
(declare-fun x_7 () String)
(declare-fun literal_8 () String)
(declare-fun x_9 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_12 () String)
(assert (= literal_2 "\x3c\x61\x20\x68\x72\x65\x66\x3d\x27"))
(assert (= x_3 (str.++ literal_2 sigmaStar_1)))
(assert (= literal_4 "\x3f\x73\x74\x65\x70\x3d\x30\x26\x6c\x6f\x63\x61\x6c\x65\x73\x65\x74\x3d"))
(assert (= x_6 (str.++ x_3 literal_4)))
(assert (= literal_5 ""))
(assert (= x_7 (str.++ x_6 literal_5)))
(assert (= literal_8 "\x27\x3e"))
(assert (= x_9 (str.++ x_7 literal_8)))
(assert (= x_10 (str.++ x_9 literal_5)))
(assert (= literal_11 "\x3c\x2f\x61\x3e"))
(assert (= x_12 (str.++ x_10 literal_11)))
(assert (str.in.re x_12 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
