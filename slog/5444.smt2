(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_8 () String)
(declare-fun x_9 () String)
(declare-fun literal_10 () String)
(declare-fun x_11 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_14 () String)
(assert (= literal_5 "\x6d\x6f\x64"))
(assert (= x_6 (str.++ literal_5 sigmaStar_4)))
(assert (= literal_7 "\x3c\x61\x20\x68\x72\x65\x66\x3d\x5c\x22"))
(assert (or (= x_8 sigmaStar_0) (= x_8 x_6)))
(assert (= x_9 (str.++ literal_7 x_8)))
(assert (= literal_10 "\x5c\x22\x20\x74\x61\x72\x67\x65\x74\x3d\x5c\x22\x6d\x61\x69\x6e\x5c\x22\x3e"))
(assert (= x_11 (str.++ x_9 literal_10)))
(assert (= x_12 (str.++ x_11 sigmaStar_1)))
(assert (= literal_13 "\x3c\x2f\x61\x3e\x3c\x62\x72\x3e\x3c\x62\x72\x3e\x5c\x6e"))
(assert (= x_14 (str.++ x_12 literal_13)))
(assert (str.in.re x_14 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
