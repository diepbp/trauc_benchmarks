(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_11 () String)
(declare-fun x_4 () String)
(declare-fun epsilon () String)
(declare-fun literal_2 () String)
(declare-fun x_12 () String)
(declare-fun literal_13 () String)
(declare-fun x_14 () String)
(assert (= literal_11 "\x3c\x69\x6d\x67\x20\x73\x72\x63\x3d\x5c\x22\x2f\x66\x2f\x69\x63\x6f\x6e\x5c\x22\x20\x20\x68\x65\x69\x67\x68\x74\x3d\x5c\x22\x31\x36\x5c\x22\x20\x77\x69\x64\x74\x68\x3d\x5c\x22\x31\x36\x5c\x22\x20\x61\x6c\x74\x3d\x5c\x22\x5c\x22\x20\x2f\x3e\x20"))
(assert (= epsilon ""))
(assert (= literal_2 ""))
(assert (or (= x_4 epsilon) (= x_4 literal_2)))
(assert (= x_12 (str.++ literal_11 x_4)))
(assert (= literal_13 "\x3c\x62\x72\x20\x2f\x3e"))
(assert (= x_14 (str.++ x_12 literal_13)))
(assert (str.in.re x_14 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
