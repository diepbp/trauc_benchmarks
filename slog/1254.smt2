(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_5 () String)
(declare-fun x_8 () String)
(declare-fun literal_3 () String)
(declare-fun literal_7 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_12 () String)
(declare-fun x_9 () String)
(declare-fun epsilon () String)
(declare-fun x_13 () String)
(declare-fun literal_14 () String)
(declare-fun x_15 () String)
(assert (= literal_5 "\x3c\x61\x20\x68\x72\x65\x66\x3d\x22\x2f\x6d\x6f\x64\x2f\x66\x6f\x72\x75\x6d\x2f\x64\x69\x73\x63\x75\x73\x73\x2e\x70\x68\x70\x3f\x64\x3d"))
(assert (= literal_3 "\x26\x61\x6d\x70\x3b\x70\x61\x72\x65\x6e\x74\x3d"))
(assert (= literal_7 ""))
(assert (or (= x_8 literal_3) (= x_8 literal_7)))
(assert (= x_10 (str.++ literal_5 x_8)))
(assert (= literal_11 "\x22\x3e"))
(assert (= x_12 (str.++ x_10 literal_11)))
(assert (= epsilon ""))
(assert (or (= x_9 epsilon)))
(assert (= x_13 (str.++ x_12 x_9)))
(assert (= literal_14 "\x3c\x2f\x61\x3e"))
(assert (= x_15 (str.++ x_13 literal_14)))
(assert (str.in.re x_15 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
