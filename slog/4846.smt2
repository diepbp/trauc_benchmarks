(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_3 () String)
(declare-fun x_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_7 () String)
(declare-fun x_6 () String)
(declare-fun epsilon () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_13 () String)
(declare-fun sigmaStar_14 () String)
(declare-fun sigmaStar_15 () String)
(declare-fun x_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_19 () String)
(declare-fun x_18 () String)
(declare-fun x_20 () String)
(declare-fun literal_21 () String)
(declare-fun x_22 () String)
(assert (= literal_3 "\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x34\x30\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x3c\x62\x3e"))
(assert (= x_4 (str.++ literal_3 sigmaStar_0)))
(assert (= literal_5 "\x3c\x2f\x62\x3e\x20"))
(assert (= x_7 (str.++ x_4 literal_5)))
(assert (= epsilon ""))
(assert (or (= x_6 epsilon)))
(assert (= x_10 (str.++ x_7 x_6)))
(assert (= literal_11 "\x3c\x2f\x74\x64\x3e\x5c\x6e\x3c\x2f\x74\x72\x3e\x5c\x6e\x3c\x74\x72\x3e\x5c\x6e\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x33\x30\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x3c\x62\x3e"))
(assert (= x_13 (str.++ x_10 literal_11)))
(assert (= x_16 (str.++ x_13 sigmaStar_1)))
(assert (= literal_17 "\x3c\x2f\x62\x3e\x20"))
(assert (= x_19 (str.++ x_16 literal_17)))
(assert (or (= x_18 sigmaStar_15) (= x_18 sigmaStar_14)))
(assert (= x_20 (str.++ x_19 x_18)))
(assert (= literal_21 "\x3c\x2f\x74\x64\x3e\x5c\x6e"))
(assert (= x_22 (str.++ x_20 literal_21)))
(assert (str.in.re x_22 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
