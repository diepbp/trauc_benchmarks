(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_0 () String)
(declare-fun x_3 () String)
(declare-fun epsilon () String)
(declare-fun x_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_6 () String)
(declare-fun x_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(assert (= literal_0 "\x2f\x6d\x6f\x64\x2f\x67\x6c\x6f\x73\x73\x61\x72\x79\x2f\x66\x6f\x72\x6d\x61\x74\x73\x2f"))
(assert (= epsilon ""))
(assert (or (= x_3 epsilon) (= x_3 sigmaStar_2)))
(assert (= x_4 (str.++ literal_0 x_3)))
(assert (= literal_5 "\x2f"))
(assert (= x_6 (str.++ x_4 literal_5)))
(assert (or (= x_7 epsilon) (= x_7 sigmaStar_2)))
(assert (= x_8 (str.++ x_6 x_7)))
(assert (= literal_9 "\x5f\x66\x6f\x72\x6d\x61\x74\x2e\x70\x68\x70"))
(assert (= x_10 (str.++ x_8 literal_9)))
(assert (str.in.re x_10 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x2f\x65\x76\x69\x6c") (re.* re.allchar)))))
(check-sat)
(get-model)
