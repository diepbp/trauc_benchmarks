(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_5 () String)
(declare-fun x_4 () String)
(declare-fun epsilon () String)
(declare-fun x_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_8 () String)
(declare-fun x_9 () String)
(declare-fun x_10 () String)
(declare-fun literal_11 () String)
(declare-fun x_12 () String)
(assert (= literal_5 "\x3c\x6f\x70\x74\x69\x6f\x6e\x20\x76\x61\x6c\x75\x65\x3d\x27"))
(assert (= epsilon ""))
(assert (or (= x_4 epsilon) (= x_4 sigmaStar_1)))
(assert (= x_6 (str.++ literal_5 x_4)))
(assert (= literal_7 "\x27\x3e"))
(assert (= x_8 (str.++ x_6 literal_7)))
(assert (or (= x_9 epsilon) (= x_9 sigmaStar_0)))
(assert (= x_10 (str.++ x_8 x_9)))
(assert (= literal_11 "\x3c\x2f\x6f\x70\x74\x69\x6f\x6e\x3e\x5c\x6e"))
(assert (= x_12 (str.++ x_10 literal_11)))
(assert (str.in.re x_12 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
