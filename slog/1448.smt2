(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun sigmaStar_3 () String)
(declare-fun sigmaStar_4 () String)
(declare-fun literal_20 () String)
(declare-fun x_19 () String)
(declare-fun literal_15 () String)
(declare-fun literal_16 () String)
(declare-fun literal_17 () String)
(declare-fun x_21 () String)
(declare-fun literal_22 () String)
(declare-fun x_23 () String)
(assert (= literal_20 "\x3c\x64\x69\x76\x20\x63\x6c\x61\x73\x73\x3d\x22\x74\x69\x6d\x65\x22\x3e"))
(assert (= literal_15 "\x20\x28\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x22\x65\x61\x72\x6c\x79\x22\x3e\x65\x61\x72\x6c\x79\x3c\x2f\x73\x70\x61\x6e\x3e\x29"))
(assert (= literal_16 "\x20\x28\x3c\x73\x70\x61\x6e\x20\x63\x6c\x61\x73\x73\x3d\x22\x6c\x61\x74\x65\x22\x3e\x6c\x61\x74\x65\x3c\x2f\x73\x70\x61\x6e\x3e\x29"))
(assert (= literal_17 ""))
(assert (or (= x_19 literal_15) (= x_19 literal_16) (= x_19 literal_17)))
(assert (= x_21 (str.++ literal_20 x_19)))
(assert (= literal_22 "\x3c\x2f\x64\x69\x76\x3e"))
(assert (= x_23 (str.++ x_21 literal_22)))
(assert (str.in.re x_23 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
