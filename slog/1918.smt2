(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun literal_7 () String)
(declare-fun x_8 () String)
(declare-fun literal_2 () String)
(declare-fun literal_4 () String)
(declare-fun literal_5 () String)
(declare-fun x_9 () String)
(declare-fun literal_10 () String)
(declare-fun x_11 () String)
(assert (= literal_7 "\x3c\x69\x6e\x70\x75\x74\x20\x74\x79\x70\x65\x3d\x5c\x22\x68\x69\x64\x64\x65\x6e\x5c\x22\x20\x6e\x61\x6d\x65\x3d\x5c\x22\x71\x75\x69\x7a\x69\x64\x5c\x22\x20\x76\x61\x6c\x75\x65\x3d\x5c\x22"))
(assert (= literal_2 "\x71\x75\x69\x7a\x69\x64"))
(assert (= literal_4 "\x26\x61\x6d\x70\x3b\x71\x75\x69\x7a\x69\x64\x3d\x71\x75\x69\x7a\x69\x64"))
(assert (= literal_5 ""))
(assert (or (= x_8 literal_2) (= x_8 literal_4) (= x_8 literal_5)))
(assert (= x_9 (str.++ literal_7 x_8)))
(assert (= literal_10 "\x5c\x22\x20\x2f\x3e\x5c\x6e"))
(assert (= x_11 (str.++ x_9 literal_10)))
(assert (str.in.re x_11 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
