(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_2 () String)
(declare-fun literal_4 () String)
(declare-fun x_3 () String)
(declare-fun epsilon () String)
(declare-fun x_5 () String)
(declare-fun literal_8 () String)
(declare-fun x_10 () String)
(declare-fun x_9 () String)
(declare-fun literal_6 () String)
(declare-fun literal_7 () String)
(declare-fun x_11 () String)
(declare-fun literal_20 () String)
(assert (= literal_4 "\x63\x61\x74\x65\x67\x6f\x72\x79\x20\x49\x4e\x20\x28"))
(assert (= epsilon ""))
(assert (or (= x_3 epsilon)))
(assert (= x_5 (str.++ literal_4 x_3)))
(assert (= literal_8 "\x29\x20\x41\x4e\x44\x20\x70\x61\x72\x65\x6e\x74\x20\x3d\x20\x27\x30\x27\x20"))
(assert (= x_10 (str.++ x_5 literal_8)))
(assert (= literal_6 "\x20\x41\x4e\x44\x20\x68\x69\x64\x64\x65\x6e\x20\x3d\x20\x27\x30\x27"))
(assert (= literal_7 ""))
(assert (or (= x_9 literal_6) (= x_9 literal_7)))
(assert (= x_11 (str.++ x_10 x_9)))
(assert (= literal_20 "\x3c\x61\x20\x68\x72\x65\x66\x3d\x22\x65\x64\x69\x74\x2e\x70\x68\x70\x3f\x63\x6f\x75\x72\x73\x65\x69\x64\x3d\x26\x61\x6d\x70\x3b\x70\x65\x72\x70\x61\x67\x65\x3d\x31\x30\x30\x30\x22\x3e\x73\x68\x6f\x77\x61\x6c\x6c\x3c\x2f\x61\x3e"))
(assert (str.in.re literal_20 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
