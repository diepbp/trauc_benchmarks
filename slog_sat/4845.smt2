(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun literal_2 () String)
(declare-fun x_3 () String)
(declare-fun literal_4 () String)
(declare-fun x_6 () String)
(declare-fun x_7 () String)
(declare-fun epsilon () String)
(declare-fun x_8 () String)
(declare-fun literal_9 () String)
(declare-fun x_10 () String)
(declare-fun x_11 () String)
(declare-fun literal_12 () String)
(declare-fun x_13 () String)
(declare-fun x_14 () String)
(declare-fun literal_15 () String)
(declare-fun x_16 () String)
(assert (= literal_2 "\x3c\x74\x72\x3e\x5c\x6e\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x33\x30\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x32\x27\x3e\x3c\x62\x3e"))
(assert (= x_3 (str.++ literal_2 sigmaStar_0)))
(assert (= literal_4 "\x3c\x2f\x62\x3e\x20"))
(assert (= x_6 (str.++ x_3 literal_4)))
(assert (= epsilon ""))
(assert (or (= x_7 epsilon)))
(assert (= x_8 (str.++ x_6 x_7)))
(assert (= literal_9 "\x3c\x2f\x74\x64\x3e\x5c\x6e\x3c\x74\x64\x20\x77\x69\x64\x74\x68\x3d\x27\x33\x30\x25\x27\x20\x63\x6c\x61\x73\x73\x3d\x27\x74\x62\x6c\x31\x27\x3e\x3c\x62\x3e"))
(assert (= x_10 (str.++ x_8 literal_9)))
(assert (= x_11 (str.++ x_10 sigmaStar_1)))
(assert (= literal_12 "\x3c\x2f\x62\x3e\x20"))
(assert (= x_13 (str.++ x_11 literal_12)))
(assert (= x_14 (str.++ x_13 x_7)))
(assert (= literal_15 "\x3c\x2f\x74\x64\x3e\x5c\x6e"))
(assert (= x_16 (str.++ x_14 literal_15)))
(assert (str.in.re x_16 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x5c\x3c\x53\x43\x52\x49\x50\x54") (re.* re.allchar)))))
(check-sat)
(get-model)
