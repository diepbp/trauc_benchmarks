(set-logic QF_S)
(set-option :strings-exp true)
(set-option :produce-models true)
(declare-fun sigmaStar_0 () String)
(declare-fun sigmaStar_1 () String)
(declare-fun sigmaStar_5 () String)
(declare-fun literal_3 () String)
(declare-fun x_6 () String)
(declare-fun sigmaStar_9 () String)
(declare-fun literal_7 () String)
(declare-fun x_10 () String)
(declare-fun sigmaStar_13 () String)
(declare-fun literal_11 () String)
(declare-fun x_14 () String)
(declare-fun sigmaStar_18 () String)
(declare-fun sigmaStar_20 () String)
(declare-fun x_23 () String)
(declare-fun literal_2 () String)
(assert (= literal_3 "\x2f\x44\x65\x66\x61\x75\x6c\x74\x2e\x68\x74\x6d"))
(assert (= x_6 (str.++ sigmaStar_5 literal_3)))
(assert (= literal_7 "\x2f\x69\x6e\x64\x65\x78\x2e\x68\x74\x6d\x6c"))
(assert (= x_10 (str.++ sigmaStar_9 literal_7)))
(assert (= literal_11 "\x2f\x69\x6e\x64\x65\x78\x2e\x68\x74\x6d"))
(assert (= x_14 (str.++ sigmaStar_13 literal_11)))
(assert (= literal_2 "\x66\x69\x6c\x65\x2e\x70\x68\x70"))
(assert (or (= x_23 x_10) (= x_23 literal_2) (= x_23 sigmaStar_20) (= x_23 x_14) (= x_23 x_6)))
(assert (str.in.re x_23 (re.++ (re.* re.allchar) (re.++ (str.to.re "\x2f\x65\x76\x69\x6c") (re.* re.allchar)))))
(check-sat)
(get-model)
